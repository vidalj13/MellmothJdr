@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<NavMenu> Logger;

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (User.Identity?.Name != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="fetchdata">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Identity/Logout">
                    <span class="oi" aria-hidden="true">
                        <MudAvatar Size="Size.Small">
                            <MudImage Src="@Avatar"></MudImage>
                        </MudAvatar>
                    </span>
                    Déconnection
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Identity/Login">
                    <span class="oi" aria-hidden="true">
                        <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Title="Connection" />
                    </span>Connection
                </NavLink>
            </div>
        }

    </nav>
</div>

@code {
    private ClaimsPrincipal User;
    private string Avatar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            User = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;



            var avatar = User.FindFirst("urn:google:image");
            Avatar = avatar != null ? avatar.Value : "";
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to resolve the authenticated user");
        }
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}